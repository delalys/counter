{"version":3,"sources":["data/gradients.js","components/Element/ElementSettings.js","components/Element/Actions.js","components/Element/index.js","components/NewElement.js","assets/clic.mp3","App.js","reportWebVitals.js","index.js"],"names":["gradients","color1","color2","ElementSettings","state","value","incrementBy","handleChange","e","setState","target","handleIncrementByChange","parseInt","isSettingsClass","this","props","settingsOpen","isMuteLabel","appIsMute","className","onSubmit","modifyName","index","modifyIncrementBy","toggleSettings","id","onClick","handleReinitElement","handleMuting","handleRemoveElement","type","placeholder","onChange","map","element","classActiveColor","gradientIndex","modifyColor","style","backgroundImage","background","Component","Actions","toggleFullScreen","pointerEvents","xmlns","data-name","viewBox","x","y","d","handleSettings","height","width","changeCount","Element","isFullScreen","isClicked","top","left","position","zIndex","React","createRef","elementSpaceAttribute","setsWidth","testWidthContainer","document","querySelector","getBoundingClientRect","current","cssText","prevState","that","setTimeout","currentState","remove","bind","mirrorElement","cloneNode","classList","add","insertAfter","thisElement","newNode","referenceNode","parentNode","insertBefore","nextSibling","count","newGradient","isFullScreenClass","elementStyle","onResize","ref","onMouseUp","onMouseDown","FormElement","handleAddElement","preventDefault","elements","nextGradientStyleId","length","gradient","newElement","addElement","App","isMute","handleCountChange","change","Audio","ClicSound","play","el","prevstate","scrollToListTop","splice","setStateElement","indexElement","property","newValue","slice","event","newIncrementBy","indexColor","newState","container","scrollIntoView","NewElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6bb997ce.chunk.js","sourcesContent":["const gradients = [\n    {\n         color1: '#4d4d4d',\n         color2: '#2c2c2c',\n    },\n    {\n         color1: '#757EA1',\n         color2: '#456F7B',\n    },\n    {\n        color1: '#9ea2e0',\n        color2: '#5a60dd',\n    },\n    {\n         color1: '#B599DE',\n         color2: '#8951DB',\n    },\n    {\n        color1: '#9B7286',\n        color2: '#A65B7D',\n    },\n    {\n        color1: '#ba8f89',\n        color2: '#c6786c',\n    },\n    {\n        color1: '#C6AB6C',\n        color2: '#A58743',\n    },\n    {\n         color1: '#688D70',\n         color2: '#509264',\n    },\n]\nexport default gradients;","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass ElementSettings extends Component {\n    state = {\n        value: '',\n        incrementBy: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleIncrementByChange = (e) => {\n        if (e.target.value !== '') {\n            this.setState({ incrementBy: parseInt(e.target.value)});\n        } else {\n            this.setState({ incrementBy: e.target.value});\n        }\n    }\n    \n    render() {       \n        const isSettingsClass = this.props.settingsOpen ? \"is-open\" : '';\n        const isMuteLabel = this.props.appIsMute ? \"Unmute app\" : 'Mute app';\n\n        return(\n            <div className={\"settings \" + isSettingsClass}>\n                <form\n                    className=\"modify-form\"\n                    onSubmit={(e) => {\n                        this.props.modifyName(e, this.state.value, this.props.index)\n                        this.props.modifyIncrementBy(this.state.incrementBy, this.props.index)\n                        this.setState({ value: '' });\n                        this.setState({ incrementBy: '' });\n                        this.props.toggleSettings(this.props.id)\n                    }}\n                >\n                    {/* Delete */}\n                    <div className=\"settings__item btn-actions\">\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleReinitElement(this.props.index)}\n                        >\n                            Reinitialise\n                        </div>\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleMuting()}\n                        >\n                            {isMuteLabel}\n                        </div>\n                        {/* <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleRemoveElement(this.props.index)}\n                        >\n                            Tap anywhere to count up\n                        </div> */}\n                        <div\n                            className=\"btn btn-action btn-danger\"\n                            onClick={() => this.props.handleRemoveElement(this.props.index)}\n                        >\n                            Delete\n                        </div>\n                    </div>\n                    {/* Name */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Name:</span>\n                            <input\n                                value={this.state.value}\n                                type=\"text\" \n                                placeholder=\"Enter a new name\"\n                                onChange={this.handleChange}\n                            />\n                    </div>\n                    {/* Increment by */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Step: <span className=\"settings__title--notice\">(now {this.props.incrementBy} by {this.props.incrementBy})</span></span>\n                            <input\n                                value={this.state.incrementBy}\n                                type=\"number\"\n                                placeholder=\"How much you want to add every count up ?\"\n                                onChange={this.handleIncrementByChange}\n                            />\n                    </div>\n                    {/* Color */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Color:</span>\n                        {this.props.gradients.map((element, index) => {\n                            let color1 = this.props.gradients[index].color1;\n                            let color2 = this.props.gradients[index].color2;\n                            let classActiveColor = (index === this.props.gradientIndex) ? 'color-example active' : 'color-example';\n                            return <span \n                                        className={classActiveColor}\n                                        key={index}\n                                        onClick={ () => this.props.modifyColor(this.props.index, index)}\n                                        style={{backgroundImage: `linear-gradient(190deg, ${color1} 0%, ${color2} 100%)`}}\n                                    ></span>\n                        })}\n                    </div>\n                    <hr/>\n                    {/* Ok and Close */}\n                    <div className=\"settings__item\">\n                        <input\n                            value=\"Save and close\"\n                            className=\"btn btn-primary\"\n                            style={{background: this.props.color1}}\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nElementSettings.propTypes = {\n    modifyName: PropTypes.func.isRequired,\n    modifyIncrementBy: PropTypes.func.isRequired,\n    toggleSettings: PropTypes.func.isRequired,\n    handleRemoveElement: PropTypes.func.isRequired,\n    color1: PropTypes.string.isRequired,\n    gradients: PropTypes.array.isRequired,\n    index: PropTypes.number.isRequired,\n}\n\nexport default ElementSettings;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = props => \n    <div className=\"element__actions\">\n        {/* toggle Full screen */}\n        <span \n            className=\"element__actions-btn\" \n            onClick={() => props.toggleFullScreen()} \n        >\n            <svg className=\"element__full-screen\"  pointerEvents=\"all\" xmlns=\"http://www.w3.org/2000/svg\" data-name=\"Layer 1\" viewBox=\"22 22 57 57\" x=\"0px\" y=\"0px\">\n                <g><path d=\"M70,42h8V30a8,8,0,0,0-8-8H58v8H70Z\"/><path d=\"M78,70V58H70V70H58v8H70A8,8,0,0,0,78,70Z\"/><path d=\"M30,78H42V70H30V58H22V70A8,8,0,0,0,30,78Z\"/><path d=\"M30,30H42V22H30a8,8,0,0,0-8,8V42h8Z\"/></g>\n            </svg>\n        </span>\n        {/* toggle Settings */}\n        <span\n            className=\"element__actions-btn hide-full-screen\"\n            onClick={() => props.handleSettings()}\n        >\n            <svg className=\"element__settings\" height=\"512pt\" viewBox=\"0 -21 512 512\" width=\"512pt\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"m448 42.667969h-206.613281c9.28125 19.433593 14.613281 41.066406 14.613281 64 0 22.933593-5.332031 44.5625-14.613281 64h206.613281c17.152344 0 33.257812-6.636719 45.3125-18.6875 12.054688-12.054688 18.6875-28.160157 18.6875-45.3125 0-35.285157-28.714844-64-64-64zm0 0\"/><path d=\"m213.332031 106.667969c0 58.910156-47.753906 106.664062-106.664062 106.664062-58.910157 0-106.667969-47.753906-106.667969-106.664062 0-58.910157 47.757812-106.667969 106.667969-106.667969 58.910156 0 106.664062 47.757812 106.664062 106.667969zm0 0\"/><path d=\"m256 362.667969c0-22.933594 5.332031-44.566407 14.613281-64h-206.613281c-35.285156 0-64 28.714843-64 64 0 17.152343 6.632812 33.257812 18.6875 45.3125 12.054688 12.050781 28.160156 18.6875 45.3125 18.6875h206.613281c-9.28125-19.4375-14.613281-41.066407-14.613281-64zm0 0\"/><path d=\"m512 362.667969c0 58.910156-47.757812 106.664062-106.667969 106.664062-58.910156 0-106.664062-47.753906-106.664062-106.664062 0-58.910157 47.753906-106.667969 106.664062-106.667969 58.910157 0 106.667969 47.757812 106.667969 106.667969zm0 0\"/>\n            </svg>\n        </span>\n        {/* Decrements */}\n        <span \n            className=\"element__actions-btn\" \n            onClick={() => props.changeCount(props.index, 'decrement')}\n        >\n            <span className=\"element__button element__button--minus\">-</span>\n        </span>\n    </div>\n\n\nActions.propTypes = {\n    toggleFullScreen: PropTypes.func.isRequired,\n    handleSettings: PropTypes.func.isRequired,\n    changeCount: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n}\n\nexport default Actions;","import React, {Component, Fragment} from 'react';\nimport ElementSettings from './ElementSettings';\nimport Actions from './Actions';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'rc-resize-observer';\n\n\nclass Element extends Component {\n    \n    state = {\n        isFullScreen: false,\n        settingsOpen: false,\n        isClicked: false,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        position: 'relative',\n        zIndex: 3,\n    }\n    \n    element = React.createRef();\n    elementSpaceAttribute = '';\n\n    componentDidMount() {\n        this.setsWidth();\n        this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n    }\n\n    setsWidth = () => {\n        let testWidthContainer = document.querySelector('.element__container').getBoundingClientRect()\n        this.setState({width: testWidthContainer.width});\n        this.element.current.style.cssText = \"width: \" + this.state.width + \"px;\";\n    }\n\n    // Place DOM element in after reference Dom element\n    insertAfter(newNode, referenceNode) {\n        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n    }  \n\n    handleSettings = () => {\n        this.setState(\n            (prevState, props) => ({ settingsOpen: !this.state.settingsOpen })\n        )\n        this.props.toggleSettings(this.props.index);\n      };\n\n    toggleFullScreen = () => {\n\n        // CLOSING\n        if (this.state.isFullScreen) {\n            \n            // Sets back original positionning\n            // Get valeu from state\n            this.element.current.style.cssText = \n                \"width: \" + this.elementSpaceAttribute.width + \"px;\"+\n                \"height: \" + this.elementSpaceAttribute.height + \"px;\"+\n                \"left: \" + this.elementSpaceAttribute.x + \"px;\"+\n                \"top: \" + this.elementSpaceAttribute.y + \"px;\"+\n                \"position: fixed;\" + \n                \"z-index: 99;\";\n              \n            this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                    zIndex: \"99\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\"+\n                        \"z-index:\"+ this.state.zIndex;\n                }\n            )\n            \n            // Toggle Open state and class\n            let that = this; \n            setTimeout(function(){ \n                const currentState = that.state.isFullScreen;\n                that.setState({ isFullScreen: !currentState });\n            }, 0);\n            \n            // Fixes once animation is done and Removes mirror element\n            setTimeout(function(){ \n                this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: '',\n                    left: '',\n                    position: \"relative\",\n                    zIndex: '',\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px\"+\n                        \"left: \" + this.state.left + \";\"+\n                        \"top: \" + this.state.top + \";\"+\n                        \"position:\"+ this.state.zIndex +\";\";\n                }\n            )\n            // Remove copy in DOM\n            document.querySelector('.mirror-element').remove();\n\n            }.bind(this), 300);\n        }\n\n        // OPENING\n        else {\n            this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n\n            // Create copy in dom\n            let mirrorElement = this.element.current.cloneNode(true);\n            mirrorElement.style.cssText = \"visibility: hidden\";\n            mirrorElement.classList.add(\"mirror-element\");\n            this.insertAfter(mirrorElement, this.element.current);\n            \n            // Sets in fixed position\n            this.setState({\n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\";\n                }\n            )\n\n            // Toggle Open state and class\n            let thisElement = this; \n            setTimeout(function(){ \n                const currentState = thisElement.state.isFullScreen;\n                thisElement.setState({ isFullScreen: !currentState });\n            }, 0);\n        }\n    }\n\n    render() {\n        \n        const {\n            value,\n            count,\n            index,\n            id,\n            gradientIndex,\n            gradients,\n            incrementBy,\n            changeCount,\n        } = this.props;\n        \n        const newGradient = gradients[gradientIndex];\n\n        const isFullScreenClass = this.state.isFullScreen ? \"is-open\" : '';\n\n        const isClicked = this.state.isClicked ? \"is-clicked\" : '';\n    \n        const elementStyle = {\n            background: `linear-gradient(190deg, ${newGradient.color1} 0%, ${newGradient.color2} 100%)`,\n        };\n\n        return(\n            <ResizeObserver onResize={() => this.setsWidth()}>\n                <Fragment>\n                    {/* Settings */}\n                    <ElementSettings \n                        color1={gradients[gradientIndex].color2}\n                        gradients={gradients}\n                        gradientIndex={gradientIndex}\n                        index={index}\n                        key={index}\n                        id={id}\n                        appIsMute={this.props.appIsMute}\n                        incrementBy={incrementBy}\n                        modifyName={this.props.modifyName}\n                        modifyIncrementBy={this.props.modifyIncrementBy}\n                        settingsOpen={this.props.settingsOpen}\n                        modifyColor={this.props.modifyColor}\n                        handleMuting={this.props.handleMuting}\n                        handleReinitElement={this.props.handleReinitElement}\n                        handleRemoveElement={this.props.handleRemoveElement}\n                        toggleSettings={this.handleSettings}\n                    />\n                    \n                    {/* ELEMENT */}\n                    <div \n                        className={isFullScreenClass +\" element justify-content-center d-flex animate__animated animate__fadeInDown\"} \n                        ref={this.element}\n                    >\n                        <span className=\"element__bg\" style={elementStyle}></span>\n\n                        {/* Actions button */}\n                        <Actions\n                            toggleFullScreen={this.toggleFullScreen}\n                            handleSettings={this.handleSettings}\n                            index={index}\n                            changeCount={changeCount}\n                        />\n                        \n                        {/* Title */}\n                        <h6 className=\"element__title\">{value}</h6>\n                        \n                        {/* Count */}\n                        <span className={isClicked + \" element__count\"}>{count}</span>\n\n                        {/* Increments */}\n                        <span \n                            className=\"element__button element__button--plus\"\n                            onClick={() => changeCount(index, 'increment') }\n                            onMouseUp={(e) => this.setState({isClicked: false})}\n                            onMouseDown={(e) => this.setState({isClicked: true})}\n                        >+</span>\n                    </div>\n                </Fragment>\n            </ResizeObserver>\n        );\n    }\n}\n\nElement.propTypes = {\n    value: PropTypes.string.isRequired,\n    count: PropTypes.number.isRequired,\n    gradients: PropTypes.array.isRequired,\n    gradientIndex: PropTypes.number.isRequired,\n    index: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    modifyName: PropTypes.func.isRequired,\n    modifyIncrementBy: PropTypes.func.isRequired,\n    settingsOpen: PropTypes.bool.isRequired,\n    appIsMute: PropTypes.bool.isRequired,\n    modifyColor: PropTypes.func.isRequired,\n    handleRemoveElement: PropTypes.func.isRequired,\n    toggleSettings: PropTypes.func.isRequired,\n    changeCount: PropTypes.func.isRequired,\n}\n\nexport default Element;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormElement extends Component {\n\n    state = {\n        value: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleAddElement = (e) => {\n        e.preventDefault();\n\n        const elements = this.props.elements;\n        // Get gradient, select the next one on the list based on the last color displayed\n        const nextGradientStyleId = (elements[elements.length - 1].gradient + 1) % this.props.gradients.length;\n        \n        // Create a new element\n        const newElement = {\n            value: this.state.value,\n            count: 0,\n            id: this.props.elements.length + 1,\n            gradient: nextGradientStyleId,\n            settingsOpen: false,\n            incrementBy: 1,\n        }\n\n        // Add a new element to app state\n        this.props.addElement(newElement);\n        \n        // Clear input\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return(\n            <form className=\"form-element mt-3\" onSubmit={this.handleAddElement}>\n                <input \n                    className=\"form-element__input\" \n                    value={this.state.value}\n                    type=\"text\" \n                    placeholder=\"Enter a new name\"\n                    onChange={this.handleChange}\n                ></input>\n                <input\n                    type=\"submit\" \n                    className=\"form-element__btn btn btn-primary\"\n                    value=\"Add\"\n                />\n                <span className=\"bg-btn\"></span>\n            </form>\n        )\n    }\n}\n\nFormElement.propTypes = {\n    elements: PropTypes.array.isRequired,\n    gradients: PropTypes.array.isRequired,\n    addElement: PropTypes.func.isRequired,\n}\n\nexport default FormElement;","export default __webpack_public_path__ + \"static/media/clic.36f03e7a.mp3\";","import React, {Component} from 'react';\nimport gradients from './data/gradients';\nimport Element from './components/Element';\nimport NewElement from './components/NewElement';\nimport './App.css';\nimport ResizeObserver from 'rc-resize-observer';\n\nimport ClicSound from './assets/clic.mp3'\n\n\n\nclass App extends Component {\n\n  state = {\n    elements: [\n      {\n        id: 1,\n        value: 'Full hour focused',\n        count: 1,\n        gradient: 1,\n        color1: '#9ea2e0',\n        color2: '#5a60dd',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 2,\n        value: 'Glass of water drunk today',\n        count: 3,\n        gradient: 2,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 3,\n        value: 'Hit the gym',\n        count: 3,\n        gradient: 3,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 4,\n        value: 'Day without smoking',\n        count: 17,\n        gradient: 4,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      }\n    ],\n    gradients: gradients,\n    isMute: false,\n  }\n  \n  \n  handleCountChange = (index, change) => {\n    // Check if resuslt is a positive number, otherwise sets it to 1\n    let incrementBy = this.state.elements[index].incrementBy;\n    if ((incrementBy === 0) || (incrementBy === '')) {\n      incrementBy = parseInt(1);\n    }\n    // Increment or decrement by the new value\n    if (change === \"increment\") {\n      parseInt(incrementBy);\n      this.setState( prevState => ({\n        count: prevState.elements[index].count +=  incrementBy\n      }));\n    } else if (change === \"decrement\") {\n      this.setState( prevState => ({\n        count: prevState.elements[index].count -=  incrementBy\n      }));\n    }\n    \n    // Play sound\n    if (!this.state.isMute)  {\n      let audio = new Audio (ClicSound);\n      audio.play()\n    }\n  }\n\n  handleMuting = () => {\n    this.setState({\n      isMute: !this.state.isMute\n    })\n  }\n\n\n  handleAddElement = (el) => {\n    this.setState( prevstate => {\n      return{\n        elements: [\n          ...prevstate.elements,\n          el\n        ]\n      }\n    });\n    this.scrollToListTop();\n  }\n  handleRemoveElement = (index) => {\n    let elements = this.state.elements;\n    elements.splice(index, 1);\n    this.setState({elements});\n  }\n\n  //--------//\n  // Helper //  Eases value changes in an element, takes in: index (number) | property to change (string) | new value\n  //--------//\n  setStateElement = (indexElement, property, newValue) => \n    this.setState(({elements}) => ({\n      elements: [\n          ...elements.slice(0,indexElement),\n          {\n              ...elements[indexElement],\n              [property]: newValue,\n          },\n          ...elements.slice(indexElement+1)\n        ]\n    }));\n\n  // Change Element name\n  modifyName = (event, newValue, indexElement) => {\n    event.preventDefault();\n    if (newValue !== '') {\n      this.setStateElement(indexElement, 'value', newValue);\n    }\n  }\n\n  // Change Element IncrementBy\n  modifyIncrementBy = (newIncrementBy, indexElement) => {\n    if (newIncrementBy !== ('' || 0)) {\n      this.setStateElement(indexElement, 'incrementBy', newIncrementBy);\n    }\n  }\n\n  // Change Element gradient\n  modifyColor = (indexElement, indexColor) =>\n    this.setStateElement(indexElement, 'gradient', indexColor);\n\n  // Change Element gradient\n  handleReinitElement = (indexElement) =>\n    this.setStateElement(indexElement, 'count', 0);\n\n\n  // Change Element settingsOpen\n  toggleSettings = (indexElement) => {\n    // Toggle settingsOpen boolean\n    let currentState = this.state.elements[indexElement].settingsOpen;\n    let newState = !currentState;\n\n    this.setStateElement(indexElement, 'settingsOpen', newState);\n  }\n\n\n  scrollToListTop = () => this.container.current.scrollIntoView();\n  \n  container = React.createRef();\n\n  \n  render(){\n    \n\n    return (\n        <div className=\"container\">\n            <div \n              className=\"element__container\"\n            >\n              {this.state.elements.map( (element, index) =>\n                <Element \n                  value={element.value}\n                  count={element.count}\n                  index={index}\n                  key={index}\n                  id={element.id}\n                  incrementBy={element.incrementBy}\n                  gradientIndex={element.gradient}\n                  gradients={this.state.gradients}\n                  appIsMute={this.state.isMute}\n                  settingsOpen={element.settingsOpen}\n                  changeCount={this.handleCountChange}\n                  modifyColor={this.modifyColor}\n                  modifyName={this.modifyName}\n                  handleMuting={this.handleMuting}\n                  modifyIncrementBy={this.modifyIncrementBy}\n                  toggleSettings={this.toggleSettings}\n                  handleReinitElement={this.handleReinitElement}\n                  handleRemoveElement={this.handleRemoveElement}\n                />\n              )}\n              <div \n                ref={this.container} \n                className=\"anchor\"\n              ></div>\n            </div>\n            <div className=\"element__container element__container--form\">\n              <NewElement \n                elements={this.state.elements}\n                addElement={this.handleAddElement}\n                gradients={this.state.gradients}\n              />\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/app.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}