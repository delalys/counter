{"version":3,"sources":["data/gradients.js","components/ElementSettings.js","components/Element.js","components/NewElement.js","App.js","reportWebVitals.js","index.js"],"names":["gradients","color1","color2","ElementSettings","state","value","incrementBy","handleChange","e","setState","target","handleIncrementByChange","parseInt","isSettingsClass","this","props","settingsOpen","className","onSubmit","modifyName","index","modifyIncrementBy","id","toggleSettings","style","color","type","placeholder","onChange","map","element","classActiveColor","gradientIndex","onClick","changeColor","backgroundImage","handleRemove","background","Component","Element","isFullScreen","width","height","top","left","position","zIndex","React","createRef","elementSpaceAttribute","setsWidth","current","getBoundingClientRect","cssText","handleSettings","prevState","toggleFullScreen","x","y","that","setTimeout","currentState","document","querySelector","remove","bind","mirrorElement","cloneNode","classList","add","insertAfter","thisElement","newNode","referenceNode","parentNode","insertBefore","nextSibling","count","changeCount","newGradient","isFullScreenClass","elementStyle","ref","pointerEvents","xmlns","data-name","viewBox","d","FormElement","handleAddElement","preventDefault","elements","nextGradientStyleId","length","gradient","newElement","addElement","App","handleCountChange","change","console","log","el","prevstate","scrollToListTop","event","newValue","updatedElements","updatedElement","newIncrementBy","idElement","elementsCopy","elementCopy","find","o","result","resultIndex","indexOf","indexColor","newState","splice","handleRemovePlayer","filter","p","container","scrollIntoView","NewElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ebae34b7.chunk.js","sourcesContent":["const gradients = [\n    {\n         color1: '#4d4d4d',\n         color2: '#2c2c2c',\n    },\n    {\n         color1: '#757EA1',\n         color2: '#456F7B',\n    },\n    {\n        color1: '#9ea2e0',\n        color2: '#5a60dd',\n    },\n    {\n         color1: '#B599DE',\n         color2: '#8951DB',\n    },\n    {\n        color1: '#9B7286',\n        color2: '#A65B7D',\n    },\n    {\n        color1: '#ba8f89',\n        color2: '#c6786c',\n    },\n    {\n        color1: '#C6AB6C',\n        color2: '#A58743',\n    },\n    {\n         color1: '#688D70',\n         color2: '#509264',\n    },\n]\nexport default gradients;","import React, { Component} from 'react';\n\n\nclass ElementSettings extends Component {\n    state = {\n        value: '',\n        incrementBy: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleIncrementByChange = (e) => {\n        if (e.target.value !== '') {\n            this.setState({ incrementBy: parseInt(e.target.value)});\n        } else {\n            this.setState({ incrementBy: e.target.value});\n        }\n    }\n    \n    render() {       \n        const isSettingsClass = this.props.settingsOpen ? \"is-open\" : '';\n\n        return(\n            <div className={\"settings \" + isSettingsClass}>\n                <form\n                    className=\"modify-form\"\n                    onSubmit={(e) => {\n                        this.props.modifyName(e, this.state.value, this.props.index)\n                        this.props.modifyIncrementBy(e, this.state.incrementBy, this.props.id)\n                        this.setState({ value: '' });\n                        this.setState({ incrementBy: '' });\n                        this.props.toggleSettings(this.props.id)\n                    }}\n                >\n                    {/* Name */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\" style={{color: this.props.color1}}>Name:</span>\n                            <input\n                                value={this.state.value}\n                                type=\"text\" \n                                placeholder=\"Enter a new name\"\n                                onChange={this.handleChange}\n                            />\n                    </div>\n                    {/* Increment by */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\" style={{color: this.props.color1}}>Count up by:</span>\n                            <input\n                                value={this.state.incrementBy}\n                                type=\"number\" \n                                placeholder=\"How much you want to add every count up ?\"\n                                onChange={this.handleIncrementByChange}\n                            />\n                    </div>\n                    {/* Color */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\" style={{color: this.props.color1}}>Color:</span>\n                        {this.props.gradients.map((element, index) => {\n                            let color1 = this.props.gradients[index].color1;\n                            let color2 = this.props.gradients[index].color2;\n                            let classActiveColor = (index === this.props.gradientIndex) ? 'color-example active' : 'color-example';\n                            return <span \n                                        className={classActiveColor}\n                                        key={index}\n                                        onClick={ () => this.props.changeColor(this.props.index, index)}\n                                        style={{backgroundImage: `linear-gradient(190deg, ${color1} 0%, ${color2} 100%)`}}\n                                    ></span>\n                        })}\n                    </div>\n                    {/* Delete */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\" style={{color: this.props.color1}}>Delete:</span>\n                        <div\n                            className=\"btn btn-danger\"\n                            onClick={() => this.props.handleRemove(this.props.index)}\n                        >\n                            Delete\n                        </div>\n                    </div>\n                    <hr/>\n                    {/* Ok and Close */}\n                    <div className=\"settings__item\">\n                        <input\n                            value=\"Save and close\"\n                            className=\"btn btn-primary\"\n                            style={{background: this.props.color1}}\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default ElementSettings;","import React, {Component, Fragment} from 'react';\nimport ElementSettings from './ElementSettings';\n\nclass Element extends Component {\n    \n    state = {\n        isFullScreen: false,\n        settingsOpen: false,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        position: 'relative',\n        zIndex: 3,\n    }\n    \n    element = React.createRef();\n    elementSpaceAttribute = '';\n\n    componentDidMount() {\n        this.setsWidth();\n        this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n    }\n    \n    setsWidth = () => {\n        this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n        this.element.current.style.cssText = \"width: \" + this.elementSpaceAttribute.width + \"px;\";\n    }\n\n    // Place DOM element in after reference Dom element\n    insertAfter(newNode, referenceNode) {\n        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n    }  \n\n    handleSettings = () => {\n        this.setState(\n            (prevState, props) => ({ settingsOpen: !this.state.settingsOpen })\n        )\n        this.props.toggleSettings(this.props.id);\n      };\n\n    toggleFullScreen = () => {\n\n        // CLOSING\n        if (this.state.isFullScreen) {\n            \n            // Sets back original positionning\n            // Get valeu from state\n            this.element.current.style.cssText = \n                \"width: \" + this.elementSpaceAttribute.width + \"px;\"+\n                \"height: \" + this.elementSpaceAttribute.height + \"px;\"+\n                \"left: \" + this.elementSpaceAttribute.x + \"px;\"+\n                \"top: \" + this.elementSpaceAttribute.y + \"px;\"+\n                \"position: fixed;\" + \n                \"z-index: 99;\";\n              \n            this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                    zIndex: \"99\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\"+\n                        \"z-index:\"+ this.state.zIndex;\n                }\n            )\n            \n            // Toggle Open state and class\n            let that = this; \n            setTimeout(function(){ \n                const currentState = that.state.isFullScreen;\n                that.setState({ isFullScreen: !currentState });\n            }, 0);\n            \n            // Fixes once animation is done and Removes mirror element\n            setTimeout(function(){ \n                this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: '',\n                    left: '',\n                    position: \"relative\",\n                    zIndex: '',\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px\"+\n                        \"left: \" + this.state.left + \";\"+\n                        \"top: \" + this.state.top + \";\"+\n                        \"position:\"+ this.state.zIndex +\";\";\n                }\n            )\n            // Remove copy in DOM\n            document.querySelector('.mirror-element').remove();\n\n            }.bind(this), 300);\n        }\n\n        // OPENING\n        else {\n            this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n\n            // Create copy in dom\n            let mirrorElement = this.element.current.cloneNode(true);\n            mirrorElement.style.cssText = \"visibility: hidden\";\n            mirrorElement.classList.add(\"mirror-element\");\n            this.insertAfter(mirrorElement, this.element.current);\n            \n            // Sets in fixed position\n            this.setState({\n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\";\n                }\n            )\n\n            // Toggle Open state and class\n            let thisElement = this; \n            setTimeout(function(){ \n                const currentState = thisElement.state.isFullScreen;\n                thisElement.setState({ isFullScreen: !currentState });\n            }, 0);\n        }\n    }\n\n    render() {\n        \n        const {\n            value,\n            count,\n            index,\n            id,\n            gradientIndex,\n            gradients,\n            changeCount,\n        } = this.props;\n        \n        const newGradient = gradients[gradientIndex];\n\n        const isFullScreenClass = this.state.isFullScreen ? \"is-open\" : '';\n    \n        const elementStyle = {\n            background: `linear-gradient(190deg, ${newGradient.color1} 0%, ${newGradient.color2} 100%)`,\n        };\n\n        return(\n            <Fragment>\n                <ElementSettings \n                    color1={gradients[gradientIndex].color2}\n                    gradients={gradients}\n                    gradientIndex={gradientIndex}\n                    index={index}\n                    key={index}\n                    id={id}\n                    modifyName={this.props.modifyName}\n                    modifyIncrementBy={this.props.modifyIncrementBy}\n                    settingsOpen={this.props.settingsOpen}\n                    changeColor={this.props.changeColor}\n                    handleRemove={this.props.handleRemove}\n                    toggleSettings={this.handleSettings}\n                />\n                <div \n                    className={isFullScreenClass +\" element justify-content-center d-flex animate__animated animate__fadeInDown\"} \n                    ref={this.element}\n                >\n                    <span className=\"element__bg\" style={elementStyle}></span>\n\n                    <div className=\"element__actions\">\n                        {/* toggle Full screen */}\n                        <span \n                            className=\"element__actions-btn\" \n                            onClick={() => this.toggleFullScreen()} \n                        >\n                            <svg className=\"element__full-screen\"  pointerEvents=\"all\" xmlns=\"http://www.w3.org/2000/svg\" data-name=\"Layer 1\" viewBox=\"22 22 57 57\" x=\"0px\" y=\"0px\">\n                                <g><path d=\"M70,42h8V30a8,8,0,0,0-8-8H58v8H70Z\"/><path d=\"M78,70V58H70V70H58v8H70A8,8,0,0,0,78,70Z\"/><path d=\"M30,78H42V70H30V58H22V70A8,8,0,0,0,30,78Z\"/><path d=\"M30,30H42V22H30a8,8,0,0,0-8,8V42h8Z\"/></g>\n                            </svg>\n                        </span>\n                        {/* toggle Settings */}\n                        <span\n                            className=\"element__actions-btn hide-full-screen\"\n                            onClick={() => this.handleSettings()}\n                        >\n                            <svg className=\"element__settings\" height=\"512pt\" viewBox=\"0 -21 512 512\" width=\"512pt\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"m448 42.667969h-206.613281c9.28125 19.433593 14.613281 41.066406 14.613281 64 0 22.933593-5.332031 44.5625-14.613281 64h206.613281c17.152344 0 33.257812-6.636719 45.3125-18.6875 12.054688-12.054688 18.6875-28.160157 18.6875-45.3125 0-35.285157-28.714844-64-64-64zm0 0\"/><path d=\"m213.332031 106.667969c0 58.910156-47.753906 106.664062-106.664062 106.664062-58.910157 0-106.667969-47.753906-106.667969-106.664062 0-58.910157 47.757812-106.667969 106.667969-106.667969 58.910156 0 106.664062 47.757812 106.664062 106.667969zm0 0\"/><path d=\"m256 362.667969c0-22.933594 5.332031-44.566407 14.613281-64h-206.613281c-35.285156 0-64 28.714843-64 64 0 17.152343 6.632812 33.257812 18.6875 45.3125 12.054688 12.050781 28.160156 18.6875 45.3125 18.6875h206.613281c-9.28125-19.4375-14.613281-41.066407-14.613281-64zm0 0\"/><path d=\"m512 362.667969c0 58.910156-47.757812 106.664062-106.667969 106.664062-58.910156 0-106.664062-47.753906-106.664062-106.664062 0-58.910157 47.753906-106.667969 106.664062-106.667969 58.910157 0 106.667969 47.757812 106.667969 106.667969zm0 0\"/>\n                            </svg>\n                        </span>\n                        {/* Decrements */}\n                        <span \n                            className=\"element__actions-btn\" \n                            onClick={() => changeCount(index, 'decrement')}\n                        >\n                            <span className=\"element__button element__button--minus\">-</span>\n                        </span>\n                    </div>\n\n                    <h6 className=\"element__title\">{value}</h6>\n                    <span className=\"element__count\">{count}</span>\n                    {/* Increments */}\n                    <span className=\"element__button element__button--plus\" onClick={() => changeCount(index, 'increment')}>+</span>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Element;","import React, { Component } from 'react';\n\nclass FormElement extends Component {\n\n    state = {\n        value: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleAddElement = (e) => {\n        e.preventDefault();\n\n        const elements = this.props.elements;\n        // Get gradient, select the next one on the list based on the last color displayed\n        const nextGradientStyleId = (elements[elements.length - 1].gradient + 1) % this.props.gradients.length;\n        \n        // Create a new element\n        const newElement = {\n            value: this.state.value,\n            count: 0,\n            id: this.props.elements.length + 1,\n            gradient: nextGradientStyleId,\n            settingsOpen: false,\n            incrementBy: 1,\n        }\n\n        // Add a new element to app state\n        this.props.addElement(newElement);\n        \n        // Clear input\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return(\n            <form className=\"form-element mt-3\" onSubmit={this.handleAddElement}>\n                <input \n                    className=\"form-element__input\" \n                    value={this.state.value}\n                    type=\"text\" \n                    placeholder=\"Enter a new name\"\n                    onChange={this.handleChange}\n                ></input>\n                <input\n                    type=\"submit\" \n                    className=\"form-element__btn btn btn-primary\"\n                    value=\"Add\"\n                />\n                <span className=\"bg-btn\"></span>\n            </form>\n        )\n    }\n}\n\nexport default FormElement;","import React, {Component} from 'react';\nimport gradients from './data/gradients';\nimport Element from './components/Element';\nimport NewElement from './components/NewElement';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    elements: [\n      {\n        id: 1,\n        value: 'Loremp ipsum dolor',\n        count: 0,\n        gradient: 1,\n        color1: '#9ea2e0',\n        color2: '#5a60dd',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 2,\n        value: 'Condiscipling dolor et sit',\n        count: 0,\n        gradient: 2,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 3,\n        value: 'Ame dolamesci',\n        count: 0,\n        gradient: 3,\n        color1: '#9B7286',\n        color2: '#A65B7D',\n        settingsOpen: false,\n        incrementBy: 1,\n      }\n    ],\n    gradients: gradients,\n  }\n\n  handleCountChange = (index, change) => {\n    // Check if resuslt is a positive number, otherwise sets it to 1\n    let incrementBy = this.state.elements[index].incrementBy;\n    if ((incrementBy === 0) || (incrementBy === '')) {\n      incrementBy = parseInt(1);\n    }\n    // Increment or decrement by the new value\n    if (change === \"increment\") {\n      console.log(incrementBy);\n      parseInt(incrementBy);\n      this.setState( prevState => ({\n        count: prevState.elements[index].count +=  incrementBy\n      }));\n    } else if (change === \"decrement\") {\n      this.setState( prevState => ({\n        count: prevState.elements[index].count -=  incrementBy\n      }));\n    }\n  }\n\n  handleAddElement = (el) => {\n    this.setState( prevstate => {\n      return{\n        elements: [\n          ...prevstate.elements,\n          el\n        ]\n      }\n    });\n    this.scrollToListTop();\n  }\n\n  modifyName = (event, newValue, index) => {\n    event.preventDefault();\n    if (newValue !== '') {\n      \n      this.setState( prevState => {\n        // New 'players' array – a copy of the previous `players` state\n        const updatedElements = [ ...prevState.elements ];\n        // A copy of the player object we're targeting\n        const updatedElement = { ...updatedElements[index] };\n  \n        // Update the target player's score\n        updatedElement.value = newValue;\n        // Update the 'players' array with the target player's latest score\n        updatedElements[index] = updatedElement;\n  \n        // Update the `players` state without mutating the original state\n        return {\n          elements: updatedElements\n        };\n      });\n\n    }\n  }\n\n  modifyIncrementBy = (e, newIncrementBy, idElement) => {\n    if (newIncrementBy !== ('' || 0)) {\n      // 1 Make a copy of the items\n      let elementsCopy = this.state.elements;\n      // 2 Make a shallow copy of one item to mutate it and Replace the property desired\n      let elementCopy = {\n        ...elementsCopy.find(o => o.id === idElement),\n        incrementBy: newIncrementBy\n      };\n      // 3 Put it back into the array\n      let result = elementsCopy.find( element => element.id === idElement);\n      let resultIndex = elementsCopy.indexOf(result);\n      elementsCopy[resultIndex] = elementCopy;   \n      // 4 Set the state to new copy\n      this.setState({elementsCopy});\n    }\n  }\n  \n\n  changeColor = (index, indexColor) => {\n    // 1. Make a shallow copy of the items\n    let elementsCopy = this.state.elements;\n    // 2. Make a shallow copy of the item you want to mutate and Replace the property you're intested in\n    let elementCopy = {\n      ...elementsCopy[index],\n      gradient: indexColor\n    }\n    // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n    elementsCopy[index] = elementCopy;\n    // 5. Set the state to our new copy\n    this.setState({elementsCopy});\n  }\n\n  toggleSettings = (idElement) => {\n\n    let currentState = this.state.elements.find( element => element.id === idElement).settingsOpen;\n    let newState = !currentState;\n    // 1. Make a shallow copy of the items\n    let elementsCopy = this.state.elements;\n    // 2. Make a shallow copy of the item you want to mutate and Replace the property you're intested in\n    let elementCopy = {\n      ...elementsCopy.find(o => o.id === idElement),\n      settingsOpen: newState\n    };\n    // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n    let result = elementsCopy.find( element => element.id === idElement);\n    let resultIndex = elementsCopy.indexOf(result);\n\n    elementsCopy[resultIndex] = elementCopy;   \n    // 5. Set the state to our new copy\n    this.setState({elementsCopy});\n  }\n\n  handleRemove = (index) => {\n    let elements = this.state.elements;\n    elements.splice(index, 1);\n    this.setState({elements});\n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        elements: prevState.elements.filter(p => p.id !== id)\n      };\n    });\n  }\n\n  scrollToListTop = () => this.container.current.scrollIntoView();\n  \n  container = React.createRef();\n\n  render(){\n    \n\n    return (\n        <div className=\"container\">\n            <div \n              className=\"element__container\"\n            >\n              {this.state.elements.map( (element, index) =>\n                <Element \n                  value={element.value}\n                  count={element.count}\n                  index={index}\n                  key={element.id}\n                  id={element.id}\n                  gradientIndex={element.gradient}\n                  gradients={this.state.gradients}\n                  settingsOpen={element.settingsOpen}\n                  changeCount={this.handleCountChange}\n                  changeColor={this.changeColor}\n                  modifyName={this.modifyName}\n                  modifyIncrementBy={this.modifyIncrementBy}\n                  toggleSettings={this.toggleSettings}\n                  handleRemove={this.handleRemove}\n                />\n              )}\n              <div \n                ref={this.container} \n                className=\"anchor\"\n              ></div>\n            </div>\n            <div className=\"element__container element__container--form\">\n              <NewElement \n                elements={this.state.elements}\n                addElement={this.handleAddElement}\n                gradients={this.state.gradients}\n              />\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/app.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}