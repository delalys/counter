{"version":3,"sources":["data/gradients.js","components/Element/ElementSettings.js","components/Element/Actions.js","components/Element/index.js","components/NewElement.js","assets/clic.mp3","App.js","reportWebVitals.js","index.js"],"names":["gradients","color1","color2","ElementSettings","state","value","incrementBy","handleChange","e","setState","target","handleIncrementByChange","parseInt","isSettingsClass","this","props","settingsOpen","isMuteLabel","appIsMute","isCondensedLabel","isCondensed","className","onSubmit","modifyName","index","modifyIncrementBy","toggleSettings","id","onClick","handleReinitElement","toggleFullScreen","handleMuting","handleCondensing","handleRemoveElement","type","placeholder","onChange","map","el","classActiveColor","gradient","modifyColor","style","backgroundImage","background","Component","Actions","pointerEvents","xmlns","data-name","viewBox","x","y","d","handleSettings","height","width","changeCount","Element","isFullScreen","isClicked","top","left","position","zIndex","element","React","createRef","elementSpaceAttribute","setsWidth","testWidthContainer","document","querySelector","getBoundingClientRect","current","cssText","prevState","that","setTimeout","currentState","remove","bind","mirrorElement","cloneNode","classList","add","insertAfter","thisElement","newNode","referenceNode","parentNode","insertBefore","nextSibling","count","gradientIndex","isFullScreenClass","isCondensedClass","appIsCondensed","textSizeClass","onResize","ref","onMouseUp","onMouseDown","FormElement","handleAddElement","preventDefault","elements","nextGradientStyleId","length","newElement","addElement","App","isMute","soundPlaying","audio","handleCountChange","change","load","play","prevstate","scrollToListTop","splice","setStateElement","indexElement","property","newValue","slice","event","newIncrementBy","oldIncrementBy","console","log","indexGradient","newState","container","scrollIntoView","i","Audio","ClicSound","preload","node","prefix","regx","RegExp","replace","isGradientClass","NewElement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bc6a15d3.chunk.js","sourcesContent":["const gradients = [\n    {\n         color1: '#4d4d4d',\n         color2: '#2c2c2c',\n    },\n    {\n         color1: '#757EA1',\n         color2: '#456F7B',\n    },\n    {\n        color1: '#9ea2e0',\n        color2: '#5a60dd',\n    },\n    {\n         color1: '#B599DE',\n         color2: '#8951DB',\n    },\n    {\n        color1: '#9B7286',\n        color2: '#A65B7D',\n    },\n    {\n        color1: '#ba8f89',\n        color2: '#c6786c',\n    },\n    {\n        color1: '#C6AB6C',\n        color2: '#A58743',\n    },\n    {\n         color1: '#688D70',\n         color2: '#509264',\n    },\n]\nexport default gradients;","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass ElementSettings extends Component {\n    state = {\n        value: '',\n        incrementBy: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleIncrementByChange = (e) => {\n        if (e.target.value !== '') {\n            this.setState({ incrementBy: parseInt(e.target.value)});\n        }\n    }\n    \n    render() {       \n        const isSettingsClass = this.props.settingsOpen ? \"is-open\" : '';\n        const isMuteLabel = this.props.appIsMute ? \"Unmute app\" : 'Mute app';\n        const isCondensedLabel = this.props.isCondensed ? \"Large view\" : 'Compact view';\n\n        return(\n            <div className={\"settings \" + isSettingsClass}>\n                <form\n                    className=\"modify-form\"\n                    onSubmit={(e) => {\n                        this.props.modifyName(e, this.state.value, this.props.index)\n                        this.props.modifyIncrementBy(this.state.incrementBy, this.props.index, this.props.incrementBy)\n                        this.setState({ value: '' });\n                        this.setState({ incrementBy: '' });\n                        this.props.toggleSettings(this.props.id)\n                    }}\n                >\n                    {/* Delete */}\n                    <div className=\"settings__item btn-actions\">\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleReinitElement(this.props.index)}\n                        >\n                            Reinitialise\n                        </div>\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.toggleFullScreen()}\n                        >\n                            Full screen\n                        </div>\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleMuting()}\n                        >\n                            {isMuteLabel}\n                        </div>\n                        <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleCondensing()}\n                        >\n                            {isCondensedLabel}\n                        </div>\n                        {/* <div\n                            className=\"btn btn-action\"\n                            onClick={() => this.props.handleRemoveElement(this.props.index)}\n                        >\n                            Tap anywhere to count up\n                        </div> */}\n                        <div\n                            className=\"btn btn-action btn-danger\"\n                            onClick={() => this.props.handleRemoveElement(this.props.index)}\n                        >\n                            Delete\n                        </div>\n                    </div>\n                    <hr/>\n                    {/* Name */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Name:</span>\n                            <input\n                                value={this.state.value}\n                                type=\"text\" \n                                placeholder=\"Enter a new name\"\n                                onChange={this.handleChange}\n                            />\n                    </div>\n                    {/* Increment by */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Step: <span className=\"settings__title--notice\">Now {this.props.incrementBy} by {this.props.incrementBy}</span></span>\n                            <input\n                                value={this.state.incrementBy}\n                                type=\"number\"\n                                placeholder=\"How much you want to add every count up ?\"\n                                onChange={this.handleIncrementByChange}\n                            />\n                    </div>\n                    {/* Color */}\n                    <div className=\"settings__item\">\n                        <span className=\"settings__title\">Color:</span>\n                        {this.props.gradients.map((el, index) => {\n                            let color1 = this.props.gradients[index].color1;\n                            let color2 = this.props.gradients[index].color2;\n                            let classActiveColor = (index === this.props.gradient) ? 'color-example active' : 'color-example';\n                            return <span \n                                        className={classActiveColor}\n                                        key={index}\n                                        onClick={ () => this.props.modifyColor(index)}\n                                    >\n                                        <div \n                                            className=\"color-example__background\"\n                                            style={{backgroundImage: `linear-gradient(190deg, ${color1} 0%, ${color2} 100%)`}}\n                                        ></div>\n                                    </span>\n                        })}\n                    </div>\n                    <hr/>\n                    {/* Ok and Close */}\n                    <div className=\"settings__item\">\n                        <input\n                            value=\"Save and close\"\n                            className=\"btn btn-primary\"\n                            style={{background: this.props.color1}}\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nElementSettings.propTypes = {\n    modifyName: PropTypes.func.isRequired,\n    modifyIncrementBy: PropTypes.func.isRequired,\n    toggleSettings: PropTypes.func.isRequired,\n    handleRemoveElement: PropTypes.func.isRequired,\n    gradients: PropTypes.array.isRequired,\n    index: PropTypes.number.isRequired,\n}\n\nexport default ElementSettings;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Actions = props => \n    <div className=\"element__actions\">\n        {/* toggle Full screen */}\n        <span \n            className=\"element__actions-btn hide-list-screen\" \n            onClick={() => props.toggleFullScreen()} \n        >\n            <svg className=\"element__full-screen\"  pointerEvents=\"all\" xmlns=\"http://www.w3.org/2000/svg\" data-name=\"Layer 1\" viewBox=\"22 22 57 57\" x=\"0px\" y=\"0px\">\n                <g><path d=\"M70,42h8V30a8,8,0,0,0-8-8H58v8H70Z\"/><path d=\"M78,70V58H70V70H58v8H70A8,8,0,0,0,78,70Z\"/><path d=\"M30,78H42V70H30V58H22V70A8,8,0,0,0,30,78Z\"/><path d=\"M30,30H42V22H30a8,8,0,0,0-8,8V42h8Z\"/></g>\n            </svg>\n        </span>\n        {/* toggle Settings */}\n        <span\n            className=\"element__actions-btn hide-full-screen\"\n            onClick={() => props.handleSettings()}\n        >\n            <svg className=\"element__settings\" height=\"512pt\" viewBox=\"0 -21 512 512\" width=\"512pt\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"m448 42.667969h-206.613281c9.28125 19.433593 14.613281 41.066406 14.613281 64 0 22.933593-5.332031 44.5625-14.613281 64h206.613281c17.152344 0 33.257812-6.636719 45.3125-18.6875 12.054688-12.054688 18.6875-28.160157 18.6875-45.3125 0-35.285157-28.714844-64-64-64zm0 0\"/><path d=\"m213.332031 106.667969c0 58.910156-47.753906 106.664062-106.664062 106.664062-58.910157 0-106.667969-47.753906-106.667969-106.664062 0-58.910157 47.757812-106.667969 106.667969-106.667969 58.910156 0 106.664062 47.757812 106.664062 106.667969zm0 0\"/><path d=\"m256 362.667969c0-22.933594 5.332031-44.566407 14.613281-64h-206.613281c-35.285156 0-64 28.714843-64 64 0 17.152343 6.632812 33.257812 18.6875 45.3125 12.054688 12.050781 28.160156 18.6875 45.3125 18.6875h206.613281c-9.28125-19.4375-14.613281-41.066407-14.613281-64zm0 0\"/><path d=\"m512 362.667969c0 58.910156-47.757812 106.664062-106.667969 106.664062-58.910156 0-106.664062-47.753906-106.664062-106.664062 0-58.910157 47.753906-106.667969 106.664062-106.667969 58.910157 0 106.667969 47.757812 106.667969 106.667969zm0 0\"/>\n            </svg>\n        </span>\n        {/* Decrements */}\n        <span \n            className=\"element__actions-btn\" \n            onClick={() => props.changeCount(props.index, 'decrement')}\n        >\n            <span className=\"element__button element__button--minus\">-</span>\n        </span>\n    </div>\n\n\nActions.propTypes = {\n    toggleFullScreen: PropTypes.func.isRequired,\n    handleSettings: PropTypes.func.isRequired,\n    changeCount: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n}\n\nexport default Actions;","import React, {Component, Fragment} from 'react';\nimport ElementSettings from './ElementSettings';\nimport Actions from './Actions';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'rc-resize-observer';\n\n\nclass Element extends Component {\n    \n    state = {\n        isFullScreen: false,\n        settingsOpen: false,\n        isClicked: false,\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        position: 'relative',\n        zIndex: 3,\n    }\n    \n    element = React.createRef();\n    elementSpaceAttribute = '';\n\n    componentDidMount() {\n        this.setsWidth();\n        this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n    }\n\n    setsWidth = () => {\n        let testWidthContainer = document.querySelector('.element__container').getBoundingClientRect()\n        this.setState({width: testWidthContainer.width});\n        this.element.current.style.cssText = \"width: \" + this.state.width + \"px;\";\n    }\n\n    // Place DOM element in after reference Dom element\n    insertAfter(newNode, referenceNode) {\n        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n    }  \n\n    handleSettings = () => {\n        this.setState(\n            (prevState, props) => ({ settingsOpen: !this.state.settingsOpen })\n        )\n        this.props.toggleSettings(this.props.index);\n      };\n\n    toggleFullScreen = () => {\n\n        // CLOSING\n        if (this.state.isFullScreen) {\n            \n            // Sets back original positionning\n            // Get valeu from state\n            this.element.current.style.cssText = \n                \"width: \" + this.elementSpaceAttribute.width + \"px;\"+\n                \"height: \" + this.elementSpaceAttribute.height + \"px;\"+\n                \"left: \" + this.elementSpaceAttribute.x + \"px;\"+\n                \"top: \" + this.elementSpaceAttribute.y + \"px;\"+\n                \"position: fixed;\" + \n                \"z-index: 99;\";\n              \n            this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                    zIndex: \"99\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\"+\n                        \"z-index:\"+ this.state.zIndex;\n                }\n            )\n            \n            // Toggle Open state and class\n            let that = this; \n            setTimeout(function(){ \n                const currentState = that.state.isFullScreen;\n                that.setState({ isFullScreen: !currentState });\n            }, 0);\n            \n            // Fixes once animation is done and Removes mirror element\n            setTimeout(function(){ \n                this.setState({ \n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: '',\n                    left: '',\n                    position: \"relative\",\n                    zIndex: '',\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px\"+\n                        \"left: \" + this.state.left + \";\"+\n                        \"top: \" + this.state.top + \";\"+\n                        \"position:\"+ this.state.zIndex +\";\";\n                }\n            )\n            // Remove copy in DOM\n            document.querySelector('.mirror-element').remove();\n\n            }.bind(this), 300);\n        }\n\n        // OPENING\n        else {\n            this.elementSpaceAttribute = this.element.current.getBoundingClientRect();\n\n            // Create copy in dom\n            let mirrorElement = this.element.current.cloneNode(true);\n            mirrorElement.style.cssText = \"visibility: hidden\";\n            mirrorElement.classList.add(\"mirror-element\");\n            this.insertAfter(mirrorElement, this.element.current);\n            \n            // Sets in fixed position\n            this.setState({\n                    width: this.elementSpaceAttribute.width,\n                    height: this.elementSpaceAttribute.height,\n                    top: this.elementSpaceAttribute.y,\n                    left: this.elementSpaceAttribute.x,\n                    position: \"fixed\",\n                }, () => {\n                    this.element.current.style.cssText = \n                        \"width: \" + this.state.width + \"px;\"+\n                        \"height: \" + this.state.height + \"px;\"+\n                        \"left: \" + this.state.left + \"px;\"+\n                        \"top: \" + this.state.top + \"px;\"+\n                        \"position:\"+ this.state.position +\";\";\n                }\n            )\n\n            // Toggle Open state and class\n            let thisElement = this; \n            setTimeout(function(){ \n                const currentState = thisElement.state.isFullScreen;\n                thisElement.setState({ isFullScreen: !currentState });\n            }, 0);\n        }\n    }\n\n    render() {\n        \n        const {\n            value,\n            count,\n            index,\n            id,\n            gradientIndex,\n            gradient,\n            gradients,\n            incrementBy,\n            changeCount,\n        } = this.props;\n\n        const isFullScreenClass = this.state.isFullScreen ? \"is-open\" : '';\n\n        const isCondensedClass = this.props.appIsCondensed ? \"is-condensed\" : '';\n        \n        const isClicked = this.state.isClicked ? \"is-clicked\" : '';\n\n        let textSizeClass = (this.props.count > 9999) ? \"reduced-text-1\" : '';\n\n        return(\n            <ResizeObserver onResize={() => this.setsWidth()}>\n                <Fragment>\n                    {/* Settings */}\n                    <ElementSettings \n                        gradients={gradients}\n                        gradient={gradient}\n                        index={index}\n                        key={index}\n                        id={id}\n                        appIsMute={this.props.appIsMute}\n                        isCondensed={this.props.appIsCondensed}\n                        incrementBy={incrementBy}\n                        modifyName={this.props.modifyName}\n                        modifyIncrementBy={this.props.modifyIncrementBy}\n                        settingsOpen={this.props.settingsOpen}\n                        modifyColor={this.props.modifyColor}\n                        handleMuting={this.props.handleMuting}\n                        handleReinitElement={this.props.handleReinitElement}\n                        handleCondensing={this.props.handleCondensing}\n                        handleRemoveElement={this.props.handleRemoveElement}\n                        toggleSettings={this.handleSettings}\n                        toggleFullScreen={this.toggleFullScreen}\n                    />\n                    \n                    {/* ELEMENT */}\n                    <div \n                        className={isFullScreenClass + \" \" + isCondensedClass + \" element justify-content-center d-flex animate__animated animate__fadeInDown\"} \n                        ref={this.element}\n                    >\n                        <span className=\"element__bg\"></span>\n\n                        {/* Actions button */}\n                        <Actions\n                            handleSettings={this.handleSettings}\n                            index={index}\n                            changeCount={changeCount}\n                            toggleFullScreen={this.toggleFullScreen}\n                        />\n                        \n                        {/* Title */}\n                        <h6 className=\"element__title\">\n                            {value}\n                            <span className=\"element__title--notice\"> (+{incrementBy})</span>\n                        </h6>\n                        \n                        {/* Count */}\n                        <span className={isClicked + \" \" + textSizeClass + \" element__count\"}>{count}</span>\n\n                        {/* Increments */}\n                        <span \n                            className=\"element__button element__button--plus\"\n                            onClick={() => changeCount(index, 'increment') }\n                            onMouseUp={(e) => this.setState({isClicked: false})}\n                            onMouseDown={(e) => this.setState({isClicked: true})}\n                        >+</span>\n                    </div>\n                </Fragment>\n            </ResizeObserver>\n        );\n    }\n}\n\nElement.propTypes = {\n    value: PropTypes.string.isRequired,\n    count: PropTypes.number.isRequired,\n    gradients: PropTypes.array.isRequired,\n    gradientIndex: PropTypes.number.isRequired,\n    index: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    modifyName: PropTypes.func.isRequired,\n    modifyIncrementBy: PropTypes.func.isRequired,\n    settingsOpen: PropTypes.bool.isRequired,\n    appIsMute: PropTypes.bool.isRequired,\n    appIsCondensed: PropTypes.bool.isRequired,\n    modifyColor: PropTypes.func.isRequired,\n    handleRemoveElement: PropTypes.func.isRequired,\n    toggleSettings: PropTypes.func.isRequired,\n    changeCount: PropTypes.func.isRequired,\n}\n\nexport default Element;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormElement extends Component {\n\n    state = {\n        value: '',\n    };\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleAddElement = (e) => {\n        e.preventDefault();\n\n        const elements = this.props.elements;\n        // Get gradient, select the next one on the list based on the last color displayed\n        const nextGradientStyleId = (elements[elements.length - 1].gradient + 1) % this.props.gradients.length;\n        \n        // Create a new element\n        const newElement = {\n            value: this.state.value,\n            count: 0,\n            id: this.props.elements.length + 1,\n            gradient: nextGradientStyleId,\n            settingsOpen: false,\n            incrementBy: 1,\n        }\n\n        // Add a new element to app state\n        this.props.addElement(newElement);\n        \n        // Clear input\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return(\n            <form className=\"form-element mt-3\" onSubmit={this.handleAddElement}>\n                <input \n                    className=\"form-element__input\" \n                    value={this.state.value}\n                    type=\"text\" \n                    placeholder=\"Enter a new name\"\n                    onChange={this.handleChange}\n                ></input>\n                <input\n                    type=\"submit\" \n                    className=\"form-element__btn btn btn-primary\"\n                    value=\"Add\"\n                />\n                <span className=\"bg-btn\"></span>\n            </form>\n        )\n    }\n}\n\nFormElement.propTypes = {\n    elements: PropTypes.array.isRequired,\n    gradients: PropTypes.array.isRequired,\n    addElement: PropTypes.func.isRequired,\n}\n\nexport default FormElement;","export default __webpack_public_path__ + \"static/media/clic.92f35524.mp3\";","import React, {Component} from 'react';\nimport gradients from './data/gradients';\nimport Element from './components/Element';\nimport NewElement from './components/NewElement';\nimport './App.css';\n\nimport ClicSound from './assets/clic.mp3'\n\n\n\nclass App extends Component {\n\n  state = {\n    elements: [\n      {\n        id: 1,\n        value: 'Glass of water',\n        count: 3,\n        gradient: 2,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      },\n      {\n        id: 2,\n        value: 'Pushups',\n        count: 50,\n        gradient: 3,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 10,\n      },\n      {\n        id: 3,\n        value: 'Day without smoking',\n        count: 17,\n        gradient: 4,\n        color1: '#ba8f89',\n        color2: '#c6786c',\n        settingsOpen: false,\n        incrementBy: 1,\n      }\n    ],\n    gradients: gradients,\n    gradient: 2,\n    isMute: false,\n    isCondensed: false,\n    soundPlaying: 0,\n  }\n  \n  \n  audio = [];\n  \n  componentDidMount() {\n    // Create and preload 10 sounds for mobile delay\n    for (let i = 0; i < 10; i++) {\n      this.audio = [\n        ...this.audio,\n        new Audio (ClicSound)\n      ]\n      this.audio[i].preload = 'auto';\n    }\n    this.modifyColor(2)\n  }\n  \n  handleCountChange = (index, change) => {\n    // Play sound\n    if (!this.state.isMute) {\n      this.audio[this.state.soundPlaying].load();\n      this.audio[this.state.soundPlaying].play()\n    }\n    this.setState({\n      soundPlaying: (this.state.soundPlaying +1) % 10\n    })\n\n    // Check if resuslt is a positive number, otherwise sets it to 1\n    let incrementBy = this.state.elements[index].incrementBy;\n    if ((incrementBy === 0) || (incrementBy === '')) {\n      incrementBy = parseInt(1);\n    }\n    // Increment or decrement by the new value\n    if (change === \"increment\") {\n      parseInt(incrementBy);\n      this.setState( prevState => ({\n        count: prevState.elements[index].count +=  incrementBy\n      }));\n    } else if (change === \"decrement\") {\n      this.setState( prevState => ({\n        count: prevState.elements[index].count -=  incrementBy\n      }));\n    }\n  }\n\n  handleMuting = () => {\n    this.setState({\n      isMute: !this.state.isMute\n    })\n  }\n\n  handleCondensing = () => {\n    this.setState({\n      isCondensed: !this.state.isCondensed\n    })\n  }\n\n\n  handleAddElement = (el) => {\n    this.setState( prevstate => {\n      return{\n        elements: [\n          ...prevstate.elements,\n          el\n        ]\n      }\n    });\n    this.scrollToListTop();\n  }\n  handleRemoveElement = (index) => {\n    let elements = this.state.elements;\n    elements.splice(index, 1);\n    this.setState({elements});\n  }\n\n  //--------//\n  // Helper //  Eases value changes in an element, takes in: index (number) | property to change (string) | new value\n  //--------//\n  setStateElement = (indexElement, property, newValue) => \n    this.setState(({elements}) => ({\n      elements: [\n          ...elements.slice(0,indexElement),\n          {\n              ...elements[indexElement],\n              [property]: newValue,\n          },\n          ...elements.slice(indexElement+1)\n        ]\n    }));\n\n  // Change Element name\n  modifyName = (event, newValue, indexElement) => {\n    event.preventDefault();\n    if (newValue !== '') {\n      this.setStateElement(indexElement, 'value', newValue);\n    }\n  }\n\n  // Change Element IncrementBy\n  modifyIncrementBy = (newIncrementBy, indexElement, oldIncrementBy) => {\n    if ((newIncrementBy !== '') && (newIncrementBy !== '0')) {\n      console.log(newIncrementBy);\n      this.setStateElement(indexElement, 'incrementBy', newIncrementBy);\n    } else if ((newIncrementBy == null) || (newIncrementBy === '0')) {\n      this.setStateElement(indexElement, 'incrementBy', oldIncrementBy);\n    }\n  }\n\n  // Change Element gradient\n  modifyColor = (indexGradient) =>{\n    this.setState({gradient: indexGradient});\n  }\n\n  removeClassByPrefix(node, prefix) {\n    var regx = new RegExp('\\\\b' + prefix + '[^ ]*[ ]?\\\\b', 'g');\n    node.className = node.className.replace(regx, '');\n    return node;\n  }\n\n  // Change Element gradient\n  handleReinitElement = (indexElement) =>\n    this.setStateElement(indexElement, 'count', 0);\n\n  // Change Element settingsOpen\n  toggleSettings = (indexElement) => {\n    // Toggle settingsOpen boolean\n    let currentState = this.state.elements[indexElement].settingsOpen;\n    let newState = !currentState;\n\n    this.setStateElement(indexElement, 'settingsOpen', newState);\n  }\n\n\n  scrollToListTop = () => this.container.current.scrollIntoView();\n  \n  container = React.createRef();\n\n  \n  render(){\n\n    const isCondensedClass = this.state.isCondensed ? \"is-condensed\" : '';\n    const isGradientClass = \"gradient-\" + this.state.gradient;\n\n    return (\n        <div className={isCondensedClass + \" \" + isGradientClass +\" background-gradient\"}>\n          <div className=\"container\">\n              <div \n                className=\"element__container\"\n              >\n                {this.state.elements.map( (element, index) =>\n                  <Element \n                    value={element.value}\n                    count={element.count}\n                    index={index}\n                    key={index}\n                    id={element.id}\n                    incrementBy={element.incrementBy}\n                    gradientIndex={element.gradient}\n                    gradient={this.state.gradient}\n                    gradients={this.state.gradients}\n                    appIsMute={this.state.isMute}\n                    appIsCondensed={this.state.isCondensed}\n                    settingsOpen={element.settingsOpen}\n                    changeCount={this.handleCountChange}\n                    modifyColor={this.modifyColor}\n                    modifyName={this.modifyName}\n                    handleMuting={this.handleMuting}\n                    handleCondensing={this.handleCondensing}\n                    modifyIncrementBy={this.modifyIncrementBy}\n                    toggleSettings={this.toggleSettings}\n                    handleReinitElement={this.handleReinitElement}\n                    handleRemoveElement={this.handleRemoveElement}\n                  />\n                )}\n                <div \n                  ref={this.container} \n                  className=\"anchor\"\n                ></div>\n              </div>\n              <div className=\"element__container element__container--form\">\n                <NewElement \n                  elements={this.state.elements}\n                  addElement={this.handleAddElement}\n                  gradients={this.state.gradients}\n                />\n              </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/app.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}